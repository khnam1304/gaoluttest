@using global::Web.Helpers
@model FeedBack
@{
    var id = "add-feedback" + Model.CustomView;
    //var data = JsonConvert.DeserializeObject<FeebackConfigsAnnoField>(Model.AnnoField);
}
@using (Ajax.BeginForm("FeedBack", "Widgets", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = id, LoadingElementId = "ajax_loader", OnComplete = "PagedFeedBackLoaded", OnBegin = "return PagedFeedBackBegin('" + (id + "-form") + "')" },
                        new { id = (id + "-form"), @class = "form site-form" }))
{
    @Html.HiddenFor(model => model.Type)
    <input value="@ViewBag.annoField" type="hidden" name="annoField" id="annoField"/>
    <input value="" type="hidden" name="Custom" id="Custom"/>
    <input value="@Model.CustomView" type="hidden" name="CustomView" id="CustomView" />
    if (ViewBag.NotifyText != null)
    {
        @Html.Raw(ViewBag.NotifyText)
    }
    if (Model.Type == "status-disabled" || Model.Type == "type-incorrect")
    {
    }
    else
    {
        <style>
            .tooltiptext {
                margin-top: -7px;
                padding: 1px 14px;
            }
        </style>
        <input type="hidden" name="DataCustom" id="DataCustom" data-scope="Custom" value="@ViewBag.dataCustom"/>

        <div class="row">

            <div class="form-group">
                <label for="FullName">@Model.AnnoFullName[0]</label>
                <input type="text" id="FullName" name="FullName" value="@Model.FullName" @(Model.AnnoFullName[2] == "required" ? "required" : "") placeholder="">
            </div>
            <div class="form-group">
                <label for="Email">@Model.AnnoEmail[0]</label>
                <input type="email" id="Email"  name="Email" @(Model.AnnoEmail[2] == "required" ? "required" : "") value="@Model.Email" placeholder="">
            </div>
            <div class="form-group">
                <label for="Phone">@Model.AnnoPhone[0]</label>

                <input type="tel" id="Phone" data-val="true" data-val-regex="Số điện thoại không hợp lệ, phải bắt đầu bằng số không và gồm 10 hoặc 11 số" data-val-regex-pattern="^[0]?[- .]?(\([0-9]\d{2}\)|[0-9]\d{2})[- .]?\d{3}[- .]?\d{4}$" name="Phone" @(Model.AnnoPhone[2] == "required" ? "required" : "") value="@Model.Phone" placeholder="">
                <span class="field-validation-valid" data-valmsg-for="Phone" data-valmsg-replace="true"></span>
            </div>
            <div class="form-group">
                <label for="Message">@Model.AnnoMessage[0]</label>
                <textarea id="Message" name="Message" rows="9" placeholder="">@Model.Message</textarea>
            </div>
            <div class="form-group">
                <label for="Message">Recaptcha: <i class="g-recaptcha-required">*</i></label>
                
                <div id="g-recaptcha" class="g-recaptcha" style="float: left; width: 100%; margin-bottom: 20px;" ></div>
            </div>
        
            <button type="submit" class="submit ripple-btn " style="text-transform: uppercase;"> <span id="add-feedback-loader" style="display: none;"> @Html.DisplayTextFor(model => model.AnnoButton[1]) </span> <i class="fa fa-paper-plane"></i> @Html.DisplayTextFor(model => model.AnnoButton[0]) </button>

        </div>

    }
}