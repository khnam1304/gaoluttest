@using System.Web.Mvc
@using System.Web.Mvc.Html
@using System.Web.Optimization
@using global::Web.Helpers
@using Web.Core.Models
@using Web.Model.Generic
@using Web.Model.Models
@using System.Text.RegularExpressions
@model Product
@{
    /**/
    var objToDisplay = new Product();
    var objToReplace = new Product() { Id = Model.Id, Name = Model.Name };
    if (Model.ProductType.Name.Contains("Accessories"))
    {
        var modelGroup = DataWhereHelper.ProductByIds(Model.ProductDisplayedId + ",", idSelf: Model.Id, take: 1);
        if (modelGroup.Any())
        {
            var objGroup = modelGroup.First();

            objToReplace.Id = objGroup.Id;
            objToReplace.Name = objGroup.Name;

            objToDisplay.Id = Model.Id;
            objToDisplay.Sku = Model.Sku;
            objToDisplay.Name = Model.Name;

            objToDisplay.ProductTypeId = Model.ProductTypeId;
            objToDisplay.Price = Model.Price;
            objToDisplay.DisplayStockPrice = Model.DisplayStockPrice;
            objToDisplay.OriginalPrice = Model.OriginalPrice;

            objToDisplay.Unit = Model.Unit;
            objToDisplay.SpecialPrice = Model.SpecialPrice;
            objToDisplay.DisplayStockPrice = Model.DisplayStockPrice;
            objToDisplay.StockQuantity = Model.StockQuantity;

            objToDisplay.ManageInventoryMethodId = Model.ManageInventoryMethodId;

            objToDisplay.DisableBuyButton = Model.DisableBuyButton;

            objToDisplay.Picture = objGroup.Picture;
            objToDisplay.ProductPictureMappings = objGroup.ProductPictureMappings.ToList();
            objToDisplay.ProductAssociateMappings = objGroup.ProductAssociateMappings.ToList();

            objToDisplay.ProductCategoryMappings = objGroup.ProductCategoryMappings.ToList();
            objToDisplay.ProductManufacturerMappings = objGroup.ProductManufacturerMappings.ToList();
            objToDisplay.ProductSpecificationAttributeMappings = objGroup.ProductSpecificationAttributeMappings.ToList();
            objToDisplay.ProductAttributeMappings = objGroup.ProductAttributeMappings.ToList();
            objToDisplay.BlogPostProductMappings = objGroup.BlogPostProductMappings.ToList();


            objToDisplay.ShortDescription = objGroup.ShortDescription;
            objToDisplay.FullDescription = objGroup.FullDescription;
            //objToDisplay.Picture = new Picture() { Url = "#" };
            //objToDisplay.ProductPictureMappings = new List<ProductPictureMapping>();

            //Model.Name = objGroup.Name;

        }
        else
        {
            objToDisplay = Model;
        }
    }
    else if (Request["refId"] != null)
    {
        var modelAccessories = DataWhereHelper.ProductByIds(Request["refId"] + ",", idSelf: Model.Id, take: 1);
        if (modelAccessories.Any())
        {
            var objGroup = modelAccessories.First();

            objToReplace.Id = Model.Id;
            objToReplace.Name = Model.Name;

            objToDisplay.Id = objGroup.Id;
            objToDisplay.Sku = objGroup.Sku;
            objToDisplay.Name = objGroup.Name;

            objToDisplay.ProductTypeId = objGroup.ProductTypeId;

            objToDisplay.Price = objGroup.Price;
            objToDisplay.DisplayStockPrice = objGroup.DisplayStockPrice;
            objToDisplay.OriginalPrice = objGroup.OriginalPrice;
            objToDisplay.ProductType = objGroup.ProductType;

            objToDisplay.Unit = objGroup.Unit;
            objToDisplay.SpecialPrice = objGroup.SpecialPrice;
            objToDisplay.DisplayStockPrice = objGroup.DisplayStockPrice;
            objToDisplay.StockQuantity = objGroup.StockQuantity;

            objToDisplay.ManageInventoryMethodId = objGroup.ManageInventoryMethodId;

            objToDisplay.DisableBuyButton = objGroup.DisableBuyButton;

            objToDisplay.Picture = Model.Picture;
            objToDisplay.ProductPictureMappings = Model.ProductPictureMappings.ToList();
            objToDisplay.ProductAssociateMappings = Model.ProductAssociateMappings.ToList();

            objToDisplay.ProductCategoryMappings = Model.ProductCategoryMappings.ToList();
            objToDisplay.ProductManufacturerMappings = Model.ProductManufacturerMappings.ToList();
            objToDisplay.ProductSpecificationAttributeMappings = Model.ProductSpecificationAttributeMappings.ToList();
            objToDisplay.ProductAttributeMappings = Model.ProductAttributeMappings.ToList();
            objToDisplay.BlogPostProductMappings = Model.BlogPostProductMappings.ToList();


            objToDisplay.ShortDescription = Model.ShortDescription;
            objToDisplay.FullDescription = Model.FullDescription;

            //
            objToDisplay.ProductPictureMappings.Add(new ProductPictureMapping { Product = objGroup, Picture = new Picture { Url = objGroup.Picture.Url, Title = objGroup.Picture.Title }, DisplayOrder = 0, Id = 1 });
        }
        else
        {
            objToDisplay = Model;
        }

    }
    else
    {
        objToDisplay = Model;
    }
    var category = DataWhereHelper.ExtractPrimaryCategory(objToDisplay.ProductCategoryMappings);
    if (category.CategoryParent == null)
    {
        category.CategoryParent = new Category() { Name = "" };
    }
    decimal? price = 0;
    decimal? discount = 0;
    string styleTabs = objToDisplay.BlogPostProductMappings.Any(e => e.IsFeaturedPost) ? "col-lg-8" : "col-lg-12";


    var categoryIds = Model.ProductCategoryMappings.OrderByDescending(e => e.DisplayOrder).Aggregate("", (current, itemSame) => current + itemSame.CategoryId + ",");
    var slug = SlugHelper.Product(Model.Id);

    var pmms = DataWhereHelper.ExtractListProductManufacturer(Model.ProductManufacturerMappings);
    var pmm = pmms == null ? new List<Manufacturer>() : pmms.ToList();

    var pmmPrimary = pmm.FirstOrDefault();

    var freshValue = DataWhereHelper.ProductMetaAttribute("AAOE.VTMA.AAAAA", @from: Model.ProductMetaAttributeMappings);
    var commitmentValue = DataWhereHelper.ProductMetaAttribute("AAUN.BOY6.AAAAA", @from: Model.ProductMetaAttributeMappings);

    var filterArrays = new List<KeyValuePair<string, int>>();
    foreach (var item in objToDisplay.ProductAssociateMappings.OrderBy(e => e.ProductAssociated.Price).ToList())
    {
        var s = item.ProductAssociated.Name.Split('/').Length == 1 ? "" : item.ProductAssociated.Name.Split('/')[1];
        if (!filterArrays.Where(x => x.Key == s).Any())
        {
            filterArrays.Add(new KeyValuePair<string, int>(s, (filterArrays.Count() + 1)));
        }
    }
    var listPictures = objToDisplay.ProductPictureMappings.OrderBy(e => e.DisplayOrder).ToList();
    if (listPictures.Count() == 0)
    {
        listPictures.Add(new ProductPictureMapping { Product = Model, Picture = new Picture { Url = "/as-images/product/image-placeholder.jpg", Title = "No avatar" }, DisplayOrder = 1, Id = 1 });
    }

}
@section styles{
    @Styles.Render("~/bundles/content/default/catalog/product/css")
}

<!-- Promo bar -->
<section class="cs-promo-bar bg-primary py-2">
    <div class="container d-flex justify-content-center">
        <div class="cs-carousel cs-controls-inverse">
            <div class="cs-carousel-inner" data-carousel-options='{"mode": "gallery", "nav": false}'>
                <div class="font-size-xs text-light px-2">
                    <strong class="mr-1">Up to 70% Off.</strong>
                    <a href="#" class="text-light">Shop our latest sale offers</a>
                </div>
                <div class="font-size-xs text-light px-2">
                    <strong class="mr-1">Money back guarantee.</strong>
                    <a href="#" class="text-light">Learn more</a>
                </div>
                <div class="font-size-xs text-light px-2">
                    <strong class="mr-1">Friendly customer support.</strong>
                    <a href="#" class="text-light">Contact 24/7</a>
                </div>
            </div>
        </div>
    </div>
</section>


<!-- Breadcrumb -->
<nav class="bg-secondary mb-3" aria-label="breadcrumb">
    <div class="container">
        @Html.Action("Breadcrumb", "Widgets", new { breadcrumbs = new List<BreadcrumbModel> { new BreadcrumbModel { Link = SlugHelper.Category(category.Id), Title = category.Name }, new BreadcrumbModel { Link = "#", Title = objToReplace.Name } }, homeIncluded = true, headingIncluded = false, area = "" })
    </div>
</nav>


<!-- Page title -->
<section class="container d-md-flex align-items-center justify-content-between py-3 py-md-4 mb-3">
    <h1 class="mb-2 mb-md-0">@objToDisplay.Name</h1>
    <span class="text-muted"><strong>Art. No.</strong> @objToDisplay.Code</span>
</section>


<!-- Single product -->
<section class="container shop-single mb-lg-3">

    <!-- Nav tabs -->
    <div data-simplebar data-simplebar-auto-hide="false">
        <ul class="nav nav-tabs flex-nowrap text-nowrap" role="tablist">
            <li class="nav-item">
                <a href="#info" class="nav-link active" data-toggle="tab" role="tab">Mô tả chung</a>
            </li>
            <li class="nav-item">
                <a href="#details" class="nav-link" data-toggle="tab" role="tab">Mô tả chi tiết</a>
            </li>
            <li class="nav-item">
                <a href="#reviews" class="nav-link" data-toggle="tab" role="tab">
                    Đánh giá
                    <sup class="ml-1">@objToDisplay.RatingCount</sup>
                </a>
            </li>
        </ul>
    </div>

    <div class="tab-content border-top pt-4">

        <!-- General info -->
        <div class="tab-pane fade show active pt-3" id="info" role="tabpanel">
            <div class="row">
                <div class="col-md-6 mb-md-0 mb-4">

                    <!-- Product gallery -->
                    <div class="cs-carousel cs-gallery cs-product-gallery mx-auto" style="max-width: 570px;">
                        <div class="cs-carousel-inner" data-carousel-options='{
                    "gutter": 15,
                    "navContainer": "#cs-thumbnails",
                    "navAsThumbnails": true
                  }'>

                            @foreach (ProductPictureMapping item in listPictures)
                            {
                                string title = Model.Picture.Title;
                                if (item.Picture.Title != null)
                                {
                                    title = item.Picture.Title;
                                }
                                <!-- Product gallery item -->
                                if (item.Link!= null && item.Link.Contains("youtube.com"))
                                {
                                    <!-- Product gallery video item -->
                                    <a class="cs-gallery-item video-item" href="@item.Link"
                                       data-sub-html='<p class="text-light">@title</p>'>
                                        <img class="rounded" src="@ImageHelper.GetResize(item.Picture.Url, 960, 960)" alt="@item.Picture.Url">
                                        <span class="cs-gallery-caption">@title</span>
                                    </a>
                                }
                                else
                                {
                                    <a class="cs-gallery-item" href="@item.Picture.Url" data-sub-html='<p class="text-light">@title</p>'>
                                        <img class="rounded" src="@ImageHelper.GetResize(item.Picture.Url, 960, 960)" alt="@item.Picture.Url">
                                        <span class="cs-gallery-caption">@title</span>
                                    </a>
                                }
                            }
                        </div>

                        <!-- Product gallery thumbnails -->
                        <div class="cs-thumbnails" id="cs-thumbnails">
                            @{
                                var idx = 0;
                            }
                            @foreach (ProductPictureMapping item in listPictures)
                            {

                                if (item.Link != null && item.Link.Contains("youtube.com"))
                                {
                                    <button type="button" data-nav="@idx" class="video-indicator" tabindex="-1" aria-label="@item.Picture.Url" aria-controls="tns2">
                                        <img src="@item.Picture.Url" alt="@item.Picture.Title">
                                    </button>
                                }
                                else
                                {
                                    <button type="button" data-nav="@idx">
                                        <img src="@item.Picture.Url" alt="@item.Picture.Title">
                                    </button>
                                }

                                idx++;
                            }

                        </div>
                    </div>
                </div>
                <div class="col-md-6 pl-xl-5">
                    <div class="d-sm-flex align-items-center justify-content-between mb-4">

                        <!-- Price -->
                        <div class="d-flex align-items-center mb-sm-0 mb-4">
                            <div class="price">
                                @if (objToDisplay.SpecialPrice != 0 && objToDisplay.SpecialPriceStartDateTime <= DateTime.Now && objToDisplay.SpecialPriceEndDateTime >= DateTime.Now)
                                {
                                    price = objToDisplay.SpecialPrice;
                                    discount = objToDisplay.Price - objToDisplay.SpecialPrice;
                                    <p class="price-label special-price-item">
                                        @LanguageHelper.Translate("Special price_Text"):
                                        <span class="span-price">@FormatHelper.FormatCurrency(objToDisplay.SpecialPrice)</span>
                                    </p>
                                    <p style="" class="old-price-item">
                                        <span class="price-label">@LanguageHelper.Translate("Original price_Text"):</span>
                                        <span>@FormatHelper.FormatCurrency(objToDisplay.Price)</span>
                                    </p>

                                }
                                else
                                {
                                    price = objToDisplay.Price;

                                    <p class="old-price-item" style=" font-size: 20px; color: #17696a !important; font-weight: 700;">
                                        <span class="price-label">@LanguageHelper.Translate("Price_Text"):</span>
                                        @if (objToDisplay.ProductType.Name.Contains("Grouped"))
                                        {
                                            if (objToDisplay.CallForPrice == true)
                                            {
                                                <span>@LanguageHelper.Translate("Contact to price quote_Text")</span>
                                            }
                                            else if (objToDisplay.LowPrice < objToDisplay.HighPrice)
                                            {
                                                <span>@(FormatHelper.FormatCurrency(objToDisplay.LowPrice)) </span> <b>-</b> <span> @(FormatHelper.FormatCurrency(objToDisplay.HighPrice)) </span>
                                            }
                                            else
                                            {
                                                <span>@(FormatHelper.FormatCurrency(objToDisplay.LowPrice)) </span>
                                            }
                                        }
                                        else
                                        {
                                            <span>@(objToDisplay.CallForPrice == true ? LanguageHelper.Translate("Contact to price quote_Text") : FormatHelper.FormatCurrency(price)) </span>
                                        }

                                    </p>
                                }

                            </div>


                        </div>

                        <!-- Rating -->

                        <div class="text-sm-right">
                            @if (objToDisplay.RatingCount > 0)
                            {
                                <span itemprop="aggregateRating" itemscope="" itemtype="http://schema.org/AggregateRating">
                                    <meta itemprop="ratingValue" content="@objToDisplay.RatingValue">
                                    <meta itemprop="ratingCount" content="@objToDisplay.RatingCount">
                                </span>
                            }
                            @if (Model.RatingCount == 0)
                            {
                                <img src="/as-images/product/review-icon.png" style="height: 16px;margin-bottom: 6px;" alt="Online Review">
                                <a style="color: #c90000;" href="#review" onclick="$('a[href=\'#reviews\']').trigger('click');">  @LanguageHelper.Translate("Hãy là người đánh giá đầu tiên_Text")</a>
                            }
                            else
                            {
                                <a href="#review" class="woocommerce-review-link" rel="nofollow" onclick="$('a[href=\'#reviews\']').trigger('click');" style="font-size: 15px; text-decoration: none;">
                                    <span itemprop="aggregateRating" class="as-rate">
                                        @for (var i = 1; i <= 5; i++)
                                        {
                                            <i class="@(Model.RatingValue >=i ? "rated":"")">★</i>
                                        }

                                    </span>
                                    <span>(@objToDisplay.RatingCount </span>đánh giá).
                                </a>
                            }

                        </div>
                    </div>

                    <!-- Ordering form -->
                    @if (Model.ProductType.Name.Contains("Grouped"))
                    {
                        <div id="filter-attr">
                            @if (!filterArrays.Where(x => x.Key == "").Any())
                            {
                                <button class="all active">@LanguageHelper.Translate("All_Text") "@Model.Name"</button>
                            }
                            @foreach (var i in filterArrays)
                            {

                                if (@i.Key != "")
                                {
                                    <button class="attr-@i.Value">@i.Key</button>
                                }


                            }
                        </div>

                        <div id="filter-items" style=" background: #dcdcdc12; margin-bottom: 20px; min-height: 108px;">

                            <figure name="@SlugHelper.Product(Model.Id)" id="@Model.Id" group="all" class='filter-item all product-associated' style="opacity:0.2">
                                <div class="figure-content">
                                    <img width="64" height="64" src="@ImageHelper.GetResize(Model.Avatar,64,64)">
                                    <span>
                                        <b class="product-name">@(Model.Name)</b>  <span class="price" style="padding-left: 14px;">
                                            <ins>
                                                See all
                                            </ins>
                                        </span>
                                    </span>
                                </div>
                            </figure>

                            @foreach (var item in objToDisplay.ProductAssociateMappings.OrderBy(e => e.ProductAssociated.Price).ToList())
                            {
                                var group = (item.ProductAssociated.Name.Split('/').Length == 1 ? "all" : ("attr-" + filterArrays.FirstOrDefault(x => x.Key == item.ProductAssociated.Name.Split('/')[1]).Value));
                                <figure name="@SlugHelper.Product(objToReplace.Id)" id="@item.ProductAssociatedId" group="@group" class='filter-item @group product-associated @(objToDisplay.Id == item.ProductAssociatedId ? "selected":"")' style="opacity:0.2">
                                    <div class="figure-content">
                                        <img width="64" height="64" src="@ImageHelper.GetResize(item.ProductAssociated.Avatar,64,64)">
                                        <span> <b class="product-name">@(item.ProductAssociated.Name.Split('/')[1])</b>  <span class="price"> <ins>   @FormatHelper.FormatCurrency(item.ProductAssociated.DisplayStockPrice == true ? item.ProductAssociated.OriginalPrice : item.ProductAssociated.Price)</ins></span></span>
                                    </div>
                                </figure>
                            }
                        </div>
                    }

                <form class="row">
                    <div class="col-12">
                        <div class="form-group">


                        </div>
                    </div>

                    <div class="col-12">
                        <table class="woocommerce-product-attributes shop_attributes">
                            <tbody>

                                @if (pmm.Any())
                                {

                                    foreach (var m in DataWhereHelper.ExtractListProductManufacturer(objToDisplay.ProductManufacturerMappings))
                                    {
                                        <tr class="woocommerce-product-attributes-item woocommerce-product-attributes-item--attribute_pa_brand">
                                            <th class="woocommerce-product-attributes-item__label">Brand</th>
                                            <td class="woocommerce-product-attributes-item__value">
                                                <span>@m.Name</span>
                                            </td>
                                        </tr>
                                    }

                                }
                                @{
                                    var listCheckoutAttributes = new List<string>();
                                }
                                @foreach (var item in DataWhereHelper.ExtractListProductSpecificationAttribute(objToDisplay.ProductSpecificationAttributeMappings).Where(e => e.SpecificationAttributeOption != null && e.SpecificationAttributeOption.DisplayOrder > 0).ToList())
                                {
                                    if (item.ShowOnProductPage == true)
                                    {
                                        if (item.SpecificationAttributeOption.SpecificationAttribute.IsCheckoutAttribute == true)
                                        {
                                            listCheckoutAttributes.Add(item.SpecificationAttributeOption.SpecificationAttribute.Name);

                                        }
                                        else
                                        {
                                            if (item.SpecificationAttributeOptionIdArray != null && item.SpecificationAttributeOptionIdArray.Contains(","))
                                            {
                                                <tr class="woocommerce-product-attributes-item woocommerce-product-attributes-item--attribute_height">
                                                    <th class="woocommerce-product-attributes-item__label">@LanguageHelper.Translate(item.SpecificationAttributeOption.SpecificationAttribute.Name + "_Text")</th>
                                                    <td class="woocommerce-product-attributes-item__value">
                                                        @foreach (var itemAtt in DataWhereHelper.ProductSpecificationAttributes(item.SpecificationAttributeOption.SpecificationAttribute.Name, @from: objToDisplay.ProductSpecificationAttributeMappings) as List<SpecificationAttributeOption>)
                                                        {
                                                            <span>@itemAtt.Name</span><span>,</span>
                                                        }
                                                    </td>
                                                </tr>

                                            }
                                            else
                                            {
                                                <tr class="woocommerce-product-attributes-item woocommerce-product-attributes-item--attribute_height">
                                                    <th class="woocommerce-product-attributes-item__label">@LanguageHelper.Translate(item.SpecificationAttributeOption.SpecificationAttribute.Name + "_Text")</th>
                                                    <td class="woocommerce-product-attributes-item__value">
                                                        <span>@Html.Raw(item.SpecificationAttributeOption.Name.ToLower().Contains(LanguageHelper.Translate("Declared # Value").ToLower()) ? item.CustomValue : item.SpecificationAttributeOption.Name)</span>
                                                    </td>
                                                </tr>
                                            }

                                        }

                                    }

                                }

                            </tbody>
                        </table>
                    </div>
                    <div class="col-12">
                        @foreach (var identifier in listCheckoutAttributes)
                        {
                            <div class="form-group">
                                <label for="pink">@identifier:</label>
                                <div class="form-group__inner">
                                    @{ var i = 0;}
                                    @foreach (var item in DataWhereHelper.ProductSpecificationAttributes(identifier, @from: objToDisplay.ProductSpecificationAttributeMappings) as List<SpecificationAttributeOption>)
                                    {
                                        {
                                            <input type="radio" name="@identifier" id="level-@item.Id" @(i==0? "checked":"") value="@item.Name">
                                            <label for="level-@item.Id">
                                                @item.Name
                                                <img src="/as-images/product/tick.png" alt="Tick">
                                            </label>
                                            i++;
                                        }
                                    }
                                </div>
                            </div>
                            
                        }

                    </div>
                    <div class="col-lg-2 col-4 order-lg-3 order-3">
                        <div class="form-group">
                            <select class="form-control custom-select" id="select-input">
                                <option>1</option>
                                <option>2</option>
                                <option>5</option>
                                <option>10</option>
                            </select>
                        </div>
                    </div>
                    <div class="col-lg-6 order-lg-4 order-4">
                        <button class="btn btn-block btn-primary">
                            <i class="cxi-cart mr-2"></i>
                            Thêm vào giỏ hàng
                        </button>
                    </div>
                    <div class="col-lg-4 col-8 order-lg-5 order-2">
                        <button class="btn btn-block btn-outline-primary px-lg-4">
                            <i class="cxi-heart mr-2"></i>
                            Yêu thích
                        </button>
                    </div>
                </form>

                    <!-- Terms -->
                    <!-- Accordion made of cards -->
                    <div class="accordion-alt mb-4" id="productTerms">
                        @if (freshValue != "")
                        {
                            <!-- Card -->
                            <div class="card border-bottom">
                                <div class="card-header" id="delivery-card">
                                    <p class="accordion-heading">
                                        <a href="#delivery" class="collapsed" role="button" data-toggle="collapse" aria-expanded="false"
                                           aria-controls="delivery">
                                            Độ tươi
                                            <span class="accordion-indicator"></span>
                                        </a>
                                    </p>
                                </div>
                                <div class="collapse" id="delivery" aria-labelledby="delivery-card" data-parent="#productTerms">
                                    <div class="card-body">

                                        @Html.Raw(WebUtility.HtmlDecode(freshValue))
                                    </div>
                                </div>
                            </div>
                        }


                        <!-- Card -->
                        @if (commitmentValue != "")
                        {
                            <div class="card border-bottom">
                                <div class="card-header" id="return-card">
                                    <p class="accordion-heading">
                                        <a class="collapsed" href="#return" role="button" data-toggle="collapse" aria-expanded="false"
                                           aria-controls="return">
                                            Cam kết
                                            <span class="accordion-indicator"></span>
                                        </a>
                                    </p>
                                </div>
                                <div class="collapse" id="return" aria-labelledby="return-card" data-parent="#productTerms">
                                    @Html.Raw(WebUtility.HtmlDecode(commitmentValue))
                                </div>
                            </div>
                        }

                    </div>

                    <!-- Share -->
                    <div class="mb-5 text-nowrap">
                        <p class="d-inline-block align-middle mr-2 mb-0">Từ khóa</p>
                        @{ var listTags = objToDisplay.ProductProductTagMappings;}
                        @{
                            if (listTags.Any())
                            {
                                foreach (ProductProductTagMapping tag in listTags)
                                {
                                    <a class="social-btn sb-solid align-middle mr-2" href="@SlugHelper.ProductTag(tag.ProductTagId)" rel="tag">#@tag.ProductTag.Name</a>
                                }
                            }
                        }
                    </div>
                </div>
            </div>
        </div>


        <!-- Product details -->
        <div class="tab-pane fade pt-3" id="details" role="tabpanel">
            <div class="row">
                <div class="col-lg-7 col-md-8 mb-md-0 mb-4">
                    @Html.Raw(objToDisplay.getFullDescription())
                </div>
                <div class="col-md-4 offset-lg-1">

                    <!-- Product card carousel -->
                    <div class="card card-product">
                        <div class="card-product-img">
                            <div class="cs-carousel cs-controls-onhover">
                                <a class="cs-carousel-inner" href="#" data-carousel-options="{
                        &quot;nav&quot;: false,
                        &quot;controlsText&quot;: [
                          &quot;&lt;i class='cxi-angle-left'&gt;&lt;/i&gt;&quot;,
                          &quot;&lt;i class='cxi-angle-right'&gt;&lt;/i&gt;&quot;
                        ]}">

                                    @foreach (ProductPictureMapping item in listPictures)
                                    {
                                        <div>
                                            <img class="card-img-top" src="@item.Picture.Url" alt="@item.Picture.Title">
                                        </div>
                                    }
                                </a>
                            </div>
                            <div class="card-product-widgets-top">
                                <div class="ml-auto star-rating">
                                    @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/Rating.cshtml", new ViewDataDictionary { { "Product", objToDisplay } }); }
                                </div>
                            </div>
                            <div class="card-product-widgets-bottom">
                                <a class="btn-wishlist ml-auto" href="#" data-toggle="tooltip" data-placement="left"
                                   title="Add to wishlist"></a>
                            </div>
                        </div>
                        <div class="card-body pb-2 bg-0">
                            <p class="card-product-title text-truncate mb-2">
                                <a href="#" class="nav-link">@objToDisplay.Name</a>
                            </p>
                            <div class="d-flex align-items-center">
                                @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/Price.cshtml", new ViewDataDictionary { { "Product", objToDisplay } }); }
                            </div>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex align-items-center mb-2 pb-1">
                            </div>
                            <button type="button" class="btn btn-primary btn-block">
                                <i class="cxi-cart align-middle mt-n1 mr-2"></i>
                                Thêm vào giỏ hàng
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <!-- Reviews -->
        <div class="tab-pane fade pt-3" id="reviews" role="tabpanel">
            <div class="row">
                <div class="col-lg-12 col-md-8 mb-md-0 mb-5">
                    @if (objToDisplay.AllowCustomerReviews == true)
                    {
                        <datalist id="TitleSuggest">
                            <option selected value="About product:: @Model.Name" />
                            <option value="About quality:: @Model.Name" />
                        </datalist>
                        <div>
                            @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/ProductReview/_AddPartial.cshtml"); }
                        </div>
                    }
                    else
                    {
                        <p style="border-bottom: 1px dotted rgb(188, 188, 188); padding-bottom: 10px; text-align: center;">@LanguageHelper.Translate("Disabled_Review_Text")</p>
                    }

                    <div>
                        @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/ProductReview/_ListPartial.cshtml"); }
                    </div>
                </div>

            </div>
        </div>
    </div>
</section>


<!-- Related products (carousel) -->
<section class="py-5 mt-5" style="background-color: #e5e8ed;">
    <div class="container my-lg-2 py-2 py-md-4">
        <div class="d-flex align-items-center justify-content-between pb-sm-1 mb-5">
            <p class="h2 h1 pr-3 mb-0">Sản phẩm cùng chuyên mục</p>
            <div class="tns-custom-controls cs-controls-inverse" id="custom-controls-related-1" tabindex="0">
                <button type="button" data-controls="prev" tabindex="-1">
                    <i class="cxi-arrow-left"></i>
                </button>
                <button type="button" data-controls="next" tabindex="-1">
                    <i class="cxi-arrow-right"></i>
                </button>
            </div>
        </div>
        <div class="cs-carousel pb-2">
            <div class="cs-carousel-inner" data-carousel-options='{
              "nav": false,
              "controlsContainer": "#custom-controls-related-1",
              "responsive": {
                "0": {
                  "items": 1,
                  "gutter": 20
                },
                "480": {
                  "items": 2,
                  "gutter": 24
                },
                "700": {
                  "items": 3,
                  "gutter": 24
                },
                "1100": {
                  "items": 4,
                  "gutter": 30
                }
              }
            }'>
                <!-- Item -->
                @{ Html.RenderAction("CategoriesSpecial", "Catalog", new { groupOf = category.Grouped, itemTake = 6, fieldTake = "ProductCategoryMappings", sortBy = "_topViewed", pathView = "Widgets/Shop/YouMayAlsoLike", area = "" }); }
                
            </div>
        </div>
    </div>
</section>

<!-- Related products (carousel) -->
@{
    List<Product> listRelated = DataWhereHelper.ProductByIds(objToDisplay.RelatedProducts, 6);
}
@if (listRelated.Any())
{
    <section class="py-5">
        <div class="container my-lg-2 py-2 py-md-4">
            <div class="d-flex align-items-center justify-content-between pb-sm-1 mb-5">
                <p class="h2 h1 pr-3 mb-0">Sản phẩm liên quan</p>
                <div class="tns-custom-controls cs-controls-inverse" id="custom-controls-related-3" tabindex="0">
                    <button type="button" data-controls="prev" tabindex="-1">
                        <i class="cxi-arrow-left"></i>
                    </button>
                    <button type="button" data-controls="next" tabindex="-1">
                        <i class="cxi-arrow-right"></i>
                    </button>
                </div>
            </div>
            <div class="cs-carousel pb-2">
                <div class="cs-carousel-inner" data-carousel-options='{
              "nav": false,
              "controlsContainer": "#custom-controls-related-3",
              "responsive": {
                "0": {
                  "items": 1,
                  "gutter": 20
                },
                "480": {
                  "items": 2,
                  "gutter": 24
                },
                "700": {
                  "items": 3,
                  "gutter": 24
                },
                "1100": {
                  "items": 4,
                  "gutter": 30
                }
              }
            }'>
                    @foreach (Product item in listRelated.AsQueryable())
                    {
                        var slugProduct = SlugHelper.Product(item.Id);
                        <!-- Item -->
                        <div>
                            <div class="card card-product mx-auto">
                                <div class="card-product-img">
                                    <a href="@slugProduct" class="card-img-top">
                                        <img src="@ImageHelper.GetResize(item.Avatar,480,480)" alt="@item.Name">
                                    </a>
                                    <div class="card-product-widgets-top">
                                        @if (item.IsPromotion)
                                        {
                                            <span class="IsPromotion badge product-badge badge-danger">Sale</span>
                                        }

                                        @if (item.IsFocus)
                                        {
                                            <span class="IsFocus badge product-badge badge-primary">Hot</span>
                                        }
                                    <div class="star-rating ml-auto">
                                        @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/Rating.cshtml", new ViewDataDictionary { { "Product", item } }); }
                                    </div>
                                    </div>
                                    <div class="card-product-widgets-bottom">
                                        <a href="#" class="btn-wishlist ml-auto" data-toggle="tooltip" data-placement="left"
                                           title="yêu thích"></a>
                                    </div>
                                </div>
                                <div class="card-body pb-2 bg-0">
                                    <p class="h3 card-product-title text-truncate mb-2">
                                        <a href="@slugProduct" class="nav-link">@item.Name</a>
                                    </p>
                                    <div class="d-flex align-items-center">
                                        @{ Html.RenderPartial("~/Views/Default/Catalog/Widgets/Shop/Price.cshtml", new ViewDataDictionary { { "Product", item } }); }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </section>
}


<!-- Related news (carousel) -->
<section class="py-5" style="background-color: #e5e8ed;">
    <div class="container my-lg-2 py-2 py-md-4">
        <div class="d-flex align-items-center justify-content-between pb-sm-1 mb-5">
            <p class="h2 h1 pr-3 mb-0">Tin tức liên quan</p>
            <div class="tns-custom-controls cs-controls-inverse" id="custom-controls-related-2" tabindex="0">
                <button type="button" data-controls="prev" tabindex="-1">
                    <i class="cxi-arrow-left"></i>
                </button>
                <button type="button" data-controls="next" tabindex="-1">
                    <i class="cxi-arrow-right"></i>
                </button>
            </div>
        </div>
        <div class="cs-carousel pb-2">
            <div class="cs-carousel-inner" data-carousel-options='{
              "nav": false,
              "controlsContainer": "#custom-controls-related-2",
              "autoplay": true,
              "responsive": {
                  "0": {
                    "items": 1,
                    "gutter": 20
                  },
                  "480": {
                    "items": 2,
                    "gutter": 24
                  },
                  "700": {
                    "items": 3,
                    "gutter": 24
                  },
                  "1100": {
                    "items": 3,
                    "gutter": 30
                  }
                }
            }'>
                <!-- Post -->
                <article class="pb-5">
                    <div class="cs-image-scale card box-shadow-0 border-0">
                        <a href="blog-single.html" class="cs-image-inner rounded">
                            <img class="news-img" src="../../assets/img/ecommerce/rice/2.jpg" alt="Image">
                        </a>
                        <div class="card-body px-0" style="background-color: #e5e8ed;">
                            <p class="h3 h5 mb-2 pb-1">
                                <a href="blog-single.html" class="nav-link">Gạo lứt bổ ngũ tạng</a>
                            </p>
                            <ul class="nav nav-muted mb-2 pb-1">
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        Gạo
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        10/24/2020
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        <i class="cxi-chat mt-n1 mr-2 font-size-base align-middle"></i>
                                        Không bình luận
                                    </a>
                                </li>
                            </ul>
                            <p class="d-sm-none d-md-block card-text text-overflow">
                                Gạo lứt chứa nhiều thành phần dinh dưỡng và các
                                nguyên tố vi lượng cũng như các loại vitamin tốt cho sức khỏe thân thể và trí tuệ con người. Đặc biệt
                                trong gạo lứt có chứa nguồn chất xơ dồi dào giúp cơ thể phòng chống được các loại bệnh như: tiểu
                                đường, sơ vữa động mạch,...
                            </p>
                        </div>
                    </div>
                </article>

                <!-- Post -->
                <article class="pb-5">
                    <div class="cs-image-scale card box-shadow-0 border-0">
                        <a href="blog-single.html" class="cs-image-inner rounded">
                            <img class="news-img" src="../../assets/img/ecommerce/tps/3.jpg" alt="Image">
                        </a>
                        <div class="card-body px-0" style="background-color: #e5e8ed;">
                            <p class="h3 h5 mb-2 pb-1">
                                <a href="blog-single.html" class="nav-link">Bún ngô</a>
                            </p>
                            <ul class="nav nav-muted mb-2 pb-1">
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        Thực phầm sạch
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        10/24/2020
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        <i class="cxi-chat mt-n1 mr-2 font-size-base align-middle"></i>
                                        4 bình luận
                                    </a>
                                </li>
                            </ul>
                            <p class="d-sm-none d-md-block card-text text-overflow">
                                Nấu, xào với ra củ. Là thức ăn được sản xuất từ
                                Ngô sạch nên giữ được đầy đủ vitamin thiết yếu, cung cấp đủ chất dinh dưỡng cho người bệnh và người ăn
                                chay.Ngâm trong nước lạnh 5-7 phút rồi cho vào nước sôi đun 2 phút, ủ 7 phút à mang rửa sạch với nước
                                lạnh. Sau đó chế biến như bún thông thường
                            </p>
                        </div>
                    </div>
                </article>
                <!-- Post -->
                <article class="pb-5">
                    <div class="cs-image-scale card box-shadow-0 border-0">
                        <a href="blog-single.html" class="cs-image-inner rounded">
                            <img class="news-img" src="../../assets/img/ecommerce/tps/2.jpg" alt="Image">
                        </a>
                        <div class="card-body px-0" style="background-color: #e5e8ed;">
                            <p class="h3 h5 mb-2 pb-1">
                                <a href="blog-single.html" class="nav-link">Bún lứt huyết hồng</a>
                            </p>
                            <ul class="nav nav-muted mb-2 pb-1">
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        Thực phầm sạch
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        10/24/2020
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        <i class="cxi-chat mt-n1 mr-2 font-size-base align-middle"></i>
                                        4 bình luận
                                    </a>
                                </li>
                            </ul>
                            <p class="d-sm-none d-md-block card-text text-overflow">
                                Là thức ăn được sản xuất từ gạo lứt nên giữ
                                được đầy đủ các vitamin thiết yếu, cung cấp đầy đủ dinh dưỡng,thích hợp sử dụng thay cho bún trắng,
                                phù hợp cho cả người bệnh và người ăn chay.
                            </p>
                        </div>
                    </div>
                </article>
                <!-- Post -->
                <article class="pb-5">
                    <div class="cs-image-scale card box-shadow-0 border-0">
                        <a href="blog-single.html" class="cs-image-inner rounded">
                            <img class="news-img" src="../../assets/img/ecommerce/tps/1.jpg" alt="Image">
                        </a>
                        <div class="card-body px-0" style="background-color: #e5e8ed;">
                            <p class="h3 h5 mb-2 pb-1">
                                <a href="blog-single.html" class="nav-link">Bún gạo lứt đen</a>
                            </p>
                            <ul class="nav nav-muted mb-2 pb-1">
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        Thực phẩm sạch
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        10/24/2020
                                    </a>
                                    <span class="text-border px-1">|</span>
                                </li>
                                <li class="nav-item mr-2">
                                    <a href="#" class="nav-link d-inline-block mr-2 p-0 font-size-sm font-weight-normal">
                                        <i class="cxi-chat mt-n1 mr-2 font-size-base align-middle"></i>
                                        4 bình luận
                                    </a>
                                </li>
                            </ul>
                            <p class="d-sm-none d-md-block card-text text-overflow">
                                Điểm đặc biệt của bún là sợi hơn các loại thông
                                thường nên rất phù hợp khi ăn lẩu, nấu canh, xào hay trộn cũng rất ngon.Là sản phẩm giàu chất xơ, hỗ
                                trợ giảm cân, hạ mỡ máu
                            </p>
                        </div>
                    </div>
                </article>
            </div>
        </div>
    </div>
</section>

@section scripts {

    @Scripts.Render("~/bundles/content/default/catalog/product/js")
    <script src="~/Scripts/jquery.timeago.js"></script>
    <script>
        $(document).ready(function() {
            $(".time-ago").timeago();
                var currentLink = $($(".main-menu a[href='@SlugHelper.Category(grouped: "our-product")']"));
                if (currentLink != null) {
                currentLink.parent().addClass('active');
            }
        });
    </script>
    <script>
        jQuery(document).ready(function () {
            Product.init();
        });
    </script>

}
